openapi: 3.0.0
info:
  version: 1.0.0
  title: Kittysaver API
  description: An administration API to help cats
servers:
  - url: http://localhost:3000/api
paths:
  /cat:
    get:
      description: Returns a list of cats
      tags:
        - Cats
      responses:
        '200':
          description: List of cats returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cat'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      security:
        - bearerAuth: []
      description: Creates a new cat
      tags:
        - Cats
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cat'
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '201':
          description: Cat has been saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cat'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /cat/{_id}:
    get:
      description: Returns the cat with a given ID
      tags:
        - Cats
      parameters:
        - name: _id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Cat data returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cat'
        '400':
          description: Invalid request with invalid objectId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Cat with the given ID was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      security:
        - bearerAuth: []
      description: Updates data of the cat with a given ID
      tags:
        - Cats
      parameters:
        - name: _id
          in: path
          required: true
          schema:
            type: string
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '200':
          description: Cat data updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cat'
        '404':
          description: Cat with the given ID was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      security:
        - bearerAuth: []
      description: Removes the cat with the given ID
      tags:
        - Cats
      parameters:
        - name: _id
          in: path
          required: true
          schema:
            type: string
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '200':
          description: Cat data removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id: 
                    type: string
        '404':
          description: Cat with the given ID was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /member:
    get:
      security:
        - bearerAuth: []
      description: Returns a list of registered users
      tags:
        - Members
      responses:
        '200':
          description: List of members returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Member'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Creates the registration of a new member
      tags:
        - Members
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Member'
      responses:
        '201':
          description: User has been saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /member/{_id}:
    get:
      security:
        - bearerAuth: []
      description: Returns the user with a given ID
      tags:
        - Members
      parameters:
        - name: _id
          in: path
          required: true
          schema:
            type: string
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '200':
          description: User data returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
        '400':
          description: Invalid request with invalid objectId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Member with the given ID was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      security:
        - bearerAuth: []
      description: Updates data of the user with a given ID
      tags:
        - Members
      parameters:
        - name: _id
          in: path
          required: true
          schema:
            type: string
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '200':
          description: User data updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
        '404':
          description: User with the given ID was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      security:
        - bearerAuth: []
      description: Removes the member with the given ID
      tags:
        - Members
      parameters:
        - name: _id
          in: path
          required: true
          schema:
            type: string
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '200':
          description: Member data removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id: 
                    type: string
        '404':
          description: User with the given ID was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /message:
    get:
      security:
        - bearerAuth: []
      description: Returns a list of registered users
      tags:
        - Messages
      responses:
        '200':
          description: List of messages returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      security:
        - bearerAuth: []
      description: Creates a new message
      tags:
        - Messages
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        '201':
          description: New message has benn saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /message/{_id}:
    get:
      security:
        - bearerAuth: []
      description: Returns the message with a given ID
      tags:
        - Messages
      parameters:
        - name: _id
          in: path
          required: true
          schema:
            type: string
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '200':
          description: Message returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':
          description: Invalid request with invalid objectId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Message with the given ID was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      security:
        - bearerAuth: []
      description: Updates message with a given ID
      tags:
        - Messages
      parameters:
        - name: _id
          in: path
          required: true
          schema:
            type: string
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '200':
          description: Message data updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '404':
          description: Message with the given ID was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /login:
    post:
      description: Login for registered users
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: 
                  type: string
                password: 
                  type: string
      responses:
        '200':
          description: Returns tokens as login has been successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken: 
                    type: string
                  refreshToken: 
                    type: string
                  user: 
                    type: object
                    properties: 
                      email: 
                        type: string
                      role: 
                        type: string
                      _id: 
                        type: string
                      name: 
                        type: string
        '400':
          description: Invalid request - missing email or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Invalid email or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /refresh:
    post:
      description: Creates a new accessToken for logged in user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken: 
                  type: string
      responses:
        '200':
          description: Returns a new accessToken
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken: 
                    type: string
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /logout:
    post:
      description: Logout for logged in user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken: 
                  type: string
      responses:
        '200':
          description: Logout has been successful
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
  schemas:
    Cat:
      type: object
      properties:
        name:
          type: string
        sex:
          type: string
        color:
          type: string
        description:
          type: string
        imgUrl:
          type: string
        adoptable:
          type: boolean
      required:
        - name
        - sex
        - color
    Member:
      type: object
      required:
        - name
        - phoneNumber
        - address
        - email
        - password
      properties:
        name:
          type: string
        phoneNumber:
          type: string
        address:
          type: string
        email:
          type: string
        password:
          type: string
        role:
          type: string
        messages:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/Message'
    Message:
      type: object
      required:
        - sender
        - messageText
      properties:
        sender:
          type: object
          $ref: '#/components/schemas/Member'
        messageText:
          type: string
        opened:
          type: boolean
    Error:
      type: object
      required:
        - message
        - has_error
      properties:
        message:
          type: string
        has_error:
          type: boolean
